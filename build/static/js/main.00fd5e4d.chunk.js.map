{"version":3,"sources":["image/scrumate.png","image/keyholder.png","page/Apps.js","page/Policy.js","page/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Apps","Box","color","width","display","flexDirection","justifyContent","Card","CardMedia","component","image","scrumate","IconButton","aria-label","Apple","Shop","GitHub","keyholder","href","React","Component","Policy","align","paddingTop","Home","props","state","value","pageComponent","event","newValue","this","setState","renderPage","pageName","bgcolor","Tabs","centered","onChange","handleChange","bind","Tab","label","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,sC,mBCA3CD,EAAOC,QAAU,IAA0B,uC,8RCMtBC,E,iLAGjB,OACE,kBAACC,EAAA,EAAD,CAAKC,MAAM,UAAUC,MAAO,IAC1B,kBAACF,EAAA,EAAD,CAAKG,QAAQ,OAAOC,cAAc,MAAMC,eAAe,iBACrD,kBAACL,EAAA,EAAD,CAAKE,MAAO,IACV,kBAACI,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,UAAU,MACVC,MAAOC,MAET,kBAACC,EAAA,EAAD,CAAYC,aAAW,YACrB,kBAACC,EAAA,EAAD,OAEF,kBAACF,EAAA,EAAD,CAAYC,aAAW,cACrB,kBAACE,EAAA,EAAD,OAEF,kBAACH,EAAA,EAAD,CAAYC,aAAW,UACrB,kBAACG,EAAA,EAAD,SAIN,kBAACf,EAAA,EAAD,CAAKE,MAAO,IACV,kBAACI,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,UAAU,MACVC,MAAOO,MAET,kBAACL,EAAA,EAAD,CAAYC,aAAW,YACrB,kBAACC,EAAA,EAAD,OAEF,kBAACF,EAAA,EAAD,CAAYC,aAAW,cACrB,kBAACE,EAAA,EAAD,OAEF,kBAACH,EAAA,EAAD,CAAYC,aAAW,SAASK,KAAK,0CACnC,kBAACF,EAAA,EAAD,e,GApCkBG,IAAMC,WCHnBC,E,iLAWjB,OACI,kBAACpB,EAAA,EAAD,CAAKC,MAAM,UAAUC,MAAO,GAAKmB,MAAM,QACrC,kBAACrB,EAAA,EAAD,CAAKsB,WAAW,MAVL,oCAWX,kBAACtB,EAAA,EAAD,CAAKsB,WAAW,MAVL,sHAWX,kBAACtB,EAAA,EAAD,CAAKsB,WAAW,MAVL,8RAWX,kBAACtB,EAAA,EAAD,CAAKsB,WAAW,MAVL,8RAWX,kBAACtB,EAAA,EAAD,CAAKsB,WAAW,MAVL,8HAWX,kBAACtB,EAAA,EAAD,CAAKsB,WAAW,MAVL,kPAWX,kBAACtB,EAAA,EAAD,CAAKsB,WAAW,MAVL,oDAWX,kBAACtB,EAAA,EAAD,CAAKsB,WAAW,MAVL,mB,GAVeJ,IAAMC,WCE7BI,EAAb,YACE,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,MAAO,OACPC,cAAe,IAJA,EADrB,0EASeC,EAAOC,GAClBC,KAAKC,SAAS,CAACL,MAAMG,MAVzB,+BAcI,IACIG,EADEC,EAAWH,KAAKL,MAAMC,MAQ5B,MANiB,SAAbO,EACFD,EAAa,kBAAC,EAAD,MACQ,WAAbC,IACRD,EAAa,kBAAC,EAAD,OAIb,kBAAChC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAD,CACAC,MAAM,UACNiC,QAAQ,UACRZ,WAAW,MACT,kBAACa,EAAA,EAAD,CACAC,UAAQ,EACRV,MAAOI,KAAKL,MAAMC,MAClBW,SAAUP,KAAKQ,aAAaC,KAAKT,OAC/B,kBAACU,EAAA,EAAD,CAAKC,MAAM,WAAWf,MAAM,SAC5B,kBAACc,EAAA,EAAD,CAAKC,MAAM,iBAAiBf,MAAM,aAGtC,kBAAC1B,EAAA,EAAD,CACEG,QAAQ,OACRE,eAAe,SACfiB,WAAW,MACVU,QAxCX,GAA0Bd,IAAMC,WCIjBuB,MANf,WACE,OACE,kBAAC,EAAD,OCOgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.00fd5e4d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/scrumate.fae27ad3.png\";","module.exports = __webpack_public_path__ + \"static/media/keyholder.070574df.png\";","import React from 'react';\nimport scrumate from './../image/scrumate.png';\nimport keyholder from './../image/keyholder.png';\nimport { Apple, Shop, GitHub } from '@material-ui/icons';\nimport { Box, Card, CardMedia, IconButton } from '@material-ui/core';\n\nexport default class Apps extends React.Component {\n\n  render() {\n    return (\n      <Box color=\"#263238\" width={2/5}>\n        <Box display=\"flex\" flexDirection=\"row\" justifyContent=\"space-between\">\n          <Box width={2/5}>\n            <Card>\n              <CardMedia\n                component=\"img\"\n                image={scrumate}\n              />\n              <IconButton aria-label=\"appStore\">\n                <Apple/>\n              </IconButton>\n              <IconButton aria-label=\"googlePlay\">\n                <Shop/>\n              </IconButton>\n              <IconButton aria-label=\"gitHub\">\n                <GitHub/>\n              </IconButton>\n            </Card>\n          </Box>\n          <Box width={2/5}>\n            <Card>\n              <CardMedia\n                component=\"img\"\n                image={keyholder}\n              />\n              <IconButton aria-label=\"appStore\">\n                <Apple/>\n              </IconButton>\n              <IconButton aria-label=\"googlePlay\">\n                <Shop/>\n              </IconButton>\n              <IconButton aria-label=\"gitHub\" href=\"https://github.com/coderals/keyholder/\">\n                <GitHub/>\n              </IconButton>\n            </Card>\n          </Box>\n        </Box>\n      </Box>\n    );\n  }\n}\n","import React from 'react';\nimport { Box } from '@material-ui/core';\n\nexport default class Policy extends React.Component {\n\n  render() {\n    let textValue1 = \"Your privacy is important to us.\";\n    let textValue2 = \"It is Coderals' policy to respect your privacy regarding any information we may collect from you through our apps.\";\n    let textValue3 = \"We only ask for personal information when we truly need it to provide a service to you, but you are always free to refuse our request. We collect it by fair and lawful means, with your knowledge and consent. We also let you know why we’re collecting it and how it will be used.\";\n    let textValue4 = \"We only retain collected information for as long as necessary to provide you with your requested service. What data we store, we’ll protect within commercially acceptable means to prevent loss and theft, as well as unauthorized access, disclosure, copying, use or modification.\";\n    let textValue5 = \"We don’t share any personally identifying information publicly or with third-parties, except when required to by law.\";\n    let textValue6 = \"Your continued use of our apps and website will be regarded as acceptance of our practices around privacy and personal information. If you have any questions about how we handle user data and personal information, feel free to contact us.\";\n    let textValue7 = \"This policy is effective as of 31 December 2020.\";\n    let textValue8 = \"- Coderals\";\n    return (\n        <Box color=\"#263238\" width={2/5} align=\"left\">\n          <Box paddingTop=\"2%\">{textValue1}</Box>\n          <Box paddingTop=\"2%\">{textValue2}</Box>\n          <Box paddingTop=\"2%\">{textValue3}</Box>\n          <Box paddingTop=\"2%\">{textValue4}</Box>\n          <Box paddingTop=\"2%\">{textValue5}</Box>\n          <Box paddingTop=\"2%\">{textValue6}</Box>\n          <Box paddingTop=\"2%\">{textValue7}</Box>\n          <Box paddingTop=\"5%\">{textValue8}</Box>\n        </Box>\n    );\n  }\n}\n","import React from 'react';\nimport { Box, Tabs, Tab } from '@material-ui/core';\nimport Apps from './Apps';\nimport Policy from './Policy';\n\nexport class Home extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: \"Apps\",\n      pageComponent: {}\n    }\n  }\n\n  handleChange(event, newValue){\n    this.setState({value:newValue});\n  }\n\n  render() {\n    const pageName = this.state.value;\n    let renderPage;\n    if (pageName === \"Apps\") {\n      renderPage = <Apps/>;\n    }else if (pageName === \"Policy\") {\n      renderPage = <Policy/>;\n    }\n\n    return (\n      <Box>\n        <Box\n        color=\"#eceff1\"\n        bgcolor=\"#263238\"\n        paddingTop=\"2%\">\n          <Tabs\n          centered\n          value={this.state.value}\n          onChange={this.handleChange.bind(this)}>\n            <Tab label=\"Coderals\" value=\"Apps\"/>\n            <Tab label=\"Privacy Policy\" value=\"Policy\"/>\n          </Tabs>\n        </Box>\n        <Box\n          display=\"flex\"\n          justifyContent=\"center\"\n          paddingTop=\"4%\">\n          {renderPage}\n        </Box>\n      </Box>\n    );\n  }\n}\n","import React from 'react';\nimport { Home } from './page/Home';\n\nfunction App() {\n  return (\n    <Home/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}